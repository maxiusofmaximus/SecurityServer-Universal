{
  "name": "C++ Security Template",
  "version": "1.0.0",
  "description": "Plantilla de seguridad avanzada para proyectos C++ usando NPX y herramientas nativas",
  "type": "cpp",
  "npxCommands": {
    "create": [
      "npx create-cpp-project",
      "npx @cpp/create-app"
    ],
    "audit": [
      "npx audit-ci --config audit-ci.json",
      "npx better-npm-audit audit"
    ],
    "scan": [
      "npx @cyclonedx/cyclonedx-cpp",
      "npx semgrep --config=auto --json"
    ]
  },
  "cppCommands": {
    "build": [
      "cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=\"-Wall -Wextra -Werror -O2 -D_FORTIFY_SOURCE=2 -fstack-protector-strong\" ..",
      "make -j$(nproc)",
      "ninja"
    ],
    "scan": [
      "cppcheck --enable=all --xml --xml-version=2",
      "clang-static-analyzer",
      "pvs-studio-analyzer",
      "pc-lint-plus",
      "semgrep --config=auto --json"
    ],
    "format": [
      "clang-format -i **/*.cpp **/*.h",
      "astyle --style=google **/*.cpp **/*.h"
    ],
    "test": [
      "ctest --output-on-failure",
      "gcov",
      "lcov --capture --directory . --output-file coverage.info"
    ],
    "sanitize": [
      "clang++ -fsanitize=address -fsanitize=undefined -g",
      "valgrind --tool=memcheck --leak-check=full",
      "clang++ -fsanitize=memory -fsanitize-memory-track-origins=2"
    ],
    "dependencies": [
      "conan install . --build=missing",
      "vcpkg install",
      "find_package"
    ]
  },
  "securityLibraries": {
    "crypto": [
      "openssl",
      "libsodium",
      "botan",
      "cryptopp"
    ],
    "networking": [
      "boost::asio",
      "curl",
      "poco"
    ],
    "utilities": [
      "boost",
      "fmt",
      "spdlog",
      "nlohmann/json"
    ],
    "testing": [
      "gtest",
      "catch2",
      "doctest",
      "boost::test"
    ]
  },
  "configFiles": {
    "CMakeLists.txt": [
      "cmake_minimum_required(VERSION 3.20)",
      "project(SecureCppProject VERSION 1.0.0 LANGUAGES CXX)",
      "",
      "set(CMAKE_CXX_STANDARD 20)",
      "set(CMAKE_CXX_STANDARD_REQUIRED ON)",
      "set(CMAKE_CXX_EXTENSIONS OFF)",
      "",
      "# Security flags",
      "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wall -Wextra -Werror\")",
      "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wformat=2 -Wformat-security\")",
      "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wnull-dereference -Wstack-protector\")",
      "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wtrampolines -Walloca\")",
      "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wvla -Warray-bounds=2\")",
      "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wimplicit-fallthrough=3\")",
      "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wshift-overflow=2 -Wcast-qual\")",
      "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wstringop-overflow=4\")",
      "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wconversion -Warith-conversion\")",
      "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wlogical-op -Wduplicated-cond\")",
      "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wduplicated-branches -Wformat-overflow=2\")",
      "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wformat-truncation=2 -Wrestrict\")",
      "",
      "# Hardening flags",
      "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -D_FORTIFY_SOURCE=2\")",
      "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fstack-protector-strong\")",
      "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fstack-clash-protection\")",
      "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fcf-protection=full\")",
      "",
      "# Linker security flags",
      "set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -Wl,-z,relro\")",
      "set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -Wl,-z,now\")",
      "set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -Wl,-z,noexecstack\")",
      "set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -Wl,-z,separate-code\")",
      "",
      "# Position Independent Executable",
      "set(CMAKE_POSITION_INDEPENDENT_CODE ON)",
      "",
      "# Enable testing",
      "enable_testing()",
      "",
      "# Find packages",
      "find_package(OpenSSL REQUIRED)",
      "find_package(Boost REQUIRED)",
      "",
      "# Add subdirectories",
      "add_subdirectory(src)",
      "add_subdirectory(tests)"
    ],
    ".clang-format": {
      "Language": "Cpp",
      "BasedOnStyle": "Google",
      "IndentWidth": 4,
      "TabWidth": 4,
      "UseTab": "Never",
      "ColumnLimit": 100,
      "BreakBeforeBraces": "Attach",
      "AllowShortIfStatementsOnASingleLine": "Never",
      "AllowShortLoopsOnASingleLine": false,
      "AllowShortFunctionsOnASingleLine": "None",
      "AlwaysBreakAfterReturnType": "None",
      "AlwaysBreakBeforeMultilineStrings": true,
      "BreakConstructorInitializers": "BeforeColon",
      "BreakInheritanceList": "BeforeColon",
      "ConstructorInitializerIndentWidth": 4,
      "ContinuationIndentWidth": 4,
      "Cpp11BracedListStyle": true,
      "DerivePointerAlignment": false,
      "PointerAlignment": "Left",
      "SpaceAfterCStyleCast": false,
      "SpaceBeforeParens": "ControlStatements",
      "SpacesInParentheses": false,
      "Standard": "c++20"
    },
    ".clang-tidy": {
      "Checks": [
        "bugprone-*",
        "cert-*",
        "clang-analyzer-*",
        "cppcoreguidelines-*",
        "google-*",
        "hicpp-*",
        "misc-*",
        "modernize-*",
        "performance-*",
        "portability-*",
        "readability-*",
        "security-*",
        "-modernize-use-trailing-return-type",
        "-google-readability-todo"
      ],
      "WarningsAsErrors": "*",
      "HeaderFilterRegex": ".*",
      "CheckOptions": {
        "readability-identifier-naming.NamespaceCase": "lower_case",
        "readability-identifier-naming.ClassCase": "CamelCase",
        "readability-identifier-naming.StructCase": "CamelCase",
        "readability-identifier-naming.FunctionCase": "camelBack",
        "readability-identifier-naming.VariableCase": "camelBack",
        "readability-identifier-naming.ParameterCase": "camelBack",
        "readability-identifier-naming.EnumCase": "CamelCase",
        "readability-identifier-naming.EnumConstantCase": "UPPER_CASE",
        "readability-identifier-naming.ConstantCase": "UPPER_CASE",
        "readability-identifier-naming.MacroDefinitionCase": "UPPER_CASE"
      }
    },
    "conanfile.txt": [
      "[requires]",
      "openssl/1.1.1t",
      "boost/1.82.0",
      "fmt/10.0.0",
      "spdlog/1.11.0",
      "nlohmann_json/3.11.2",
      "gtest/1.13.0",
      "",
      "[generators]",
      "CMakeDeps",
      "CMakeToolchain",
      "",
      "[options]",
      "openssl:shared=False",
      "boost:shared=False"
    ],
    "vcpkg.json": {
      "name": "secure-cpp-project",
      "version": "1.0.0",
      "dependencies": [
        "openssl",
        "boost",
        "fmt",
        "spdlog",
        "nlohmann-json",
        "gtest"
      ],
      "features": {
        "security": {
          "description": "Security-focused dependencies",
          "dependencies": [
            "libsodium",
            "botan",
            "cryptopp"
          ]
        }
      }
    }
  },
  "scripts": {
    "configure": "cmake -B build -S . -DCMAKE_BUILD_TYPE=Release",
    "build": "cmake --build build --config Release",
    "test": "cd build && ctest --output-on-failure",
    "clean": "rm -rf build",
    "security:scan": "cppcheck --enable=all --xml --xml-version=2 src/",
    "security:analyze": "clang-static-analyzer src/",
    "security:sanitize": "cmake -B build-sanitize -S . -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS='-fsanitize=address -fsanitize=undefined'",
    "security:valgrind": "valgrind --tool=memcheck --leak-check=full ./build/bin/main",
    "security:full": "npm run security:scan && npm run security:analyze",
    "format": "clang-format -i src/**/*.cpp src/**/*.h",
    "format:check": "clang-format --dry-run --Werror src/**/*.cpp src/**/*.h",
    "lint": "clang-tidy src/**/*.cpp -- -Isrc/include",
    "coverage": "lcov --capture --directory build --output-file coverage.info && genhtml coverage.info --output-directory coverage",
    "install:deps": "conan install . --build=missing || vcpkg install",
    "docs": "doxygen Doxyfile"
  },
  "securityPolicies": {
    "cppStandard": "c++20",
    "compilerVersion": {
      "gcc": ">=11.0",
      "clang": ">=14.0",
      "msvc": ">=19.30"
    },
    "vulnerabilityThreshold": "moderate",
    "allowedLicenses": ["MIT", "Apache-2.0", "BSD-3-Clause", "Boost"],
    "blockedLibraries": ["gets", "strcpy", "strcat", "sprintf"],
    "requiredFlags": [
      "-Wall",
      "-Wextra",
      "-Werror",
      "-D_FORTIFY_SOURCE=2",
      "-fstack-protector-strong"
    ],
    "sanitizers": {
      "address": true,
      "undefined": true,
      "memory": true,
      "thread": true
    },
    "staticAnalysis": {
      "cppcheck": true,
      "clangStaticAnalyzer": true,
      "pvsStudio": true,
      "pcLint": true
    }
  },
  "buildOptimizations": {
    "lto": true,
    "pgo": false,
    "unity": false,
    "ccache": true,
    "ninja": true
  },
  "securityGuidelines": {
    "memoryManagement": [
      "Use smart pointers (std::unique_ptr, std::shared_ptr)",
      "Avoid raw pointers for ownership",
      "Use RAII principles",
      "Prefer stack allocation over heap when possible"
    ],
    "inputValidation": [
      "Validate all external inputs",
      "Use safe string functions",
      "Implement bounds checking",
      "Sanitize user data"
    ],
    "cryptography": [
      "Use established crypto libraries (OpenSSL, libsodium)",
      "Never implement custom crypto algorithms",
      "Use secure random number generators",
      "Implement proper key management"
    ],
    "errorHandling": [
      "Use exceptions for error handling",
      "Implement proper cleanup in destructors",
      "Avoid silent failures",
      "Log security-relevant events"
    ]
  }
}