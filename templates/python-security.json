{
  "name": "Python Security Template",
  "version": "1.0.0",
  "description": "Plantilla de seguridad avanzada para proyectos Python usando NPX y herramientas Python",
  "type": "python",
  "npxCommands": {
    "create": [
      "npx create-python-app",
      "npx cookiecutter gh:audreyr/cookiecutter-pypackage"
    ],
    "audit": [
      "npx audit-ci --config audit-ci.json",
      "npx better-npm-audit audit"
    ],
    "scan": [
      "npx @cyclonedx/cyclonedx-python",
      "npx semgrep --config=auto --json"
    ]
  },
  "pythonCommands": {
    "audit": [
      "pip-audit",
      "safety check",
      "bandit -r . -f json"
    ],
    "scan": [
      "semgrep --config=auto --json",
      "pylint --output-format=json",
      "flake8 --format=json",
      "mypy --json-report"
    ],
    "format": [
      "black .",
      "isort .",
      "autopep8 --in-place --recursive ."
    ],
    "test": [
      "pytest --cov=. --cov-report=json",
      "coverage run -m pytest",
      "coverage report --format=json"
    ],
    "dependencies": [
      "pip freeze > requirements.txt",
      "pipdeptree --json",
      "pip-licenses --format=json"
    ]
  },
  "securityPackages": {
    "runtime": [
      "cryptography",
      "bcrypt",
      "pyjwt",
      "requests[security]",
      "urllib3[secure]",
      "certifi",
      "python-dotenv",
      "pydantic",
      "sqlalchemy",
      "psycopg2-binary"
    ],
    "development": [
      "bandit",
      "safety",
      "pip-audit",
      "semgrep",
      "pylint",
      "flake8",
      "mypy",
      "black",
      "isort",
      "autopep8",
      "pytest",
      "pytest-cov",
      "coverage",
      "pre-commit",
      "pipdeptree",
      "pip-licenses"
    ]
  },
  "configFiles": {
    "pyproject.toml": {
      "build-system": {
        "requires": ["setuptools>=61.0", "wheel"],
        "build-backend": "setuptools.build_meta"
      },
      "project": {
        "name": "secure-python-project",
        "version": "1.0.0",
        "description": "Secure Python project template",
        "requires-python": ">=3.9",
        "dependencies": []
      },
      "tool": {
        "black": {
          "line-length": 88,
          "target-version": ["py39"],
          "include": "\\.pyi?$",
          "exclude": "/(\\.|venv|build|dist)/"
        },
        "isort": {
          "profile": "black",
          "multi_line_output": 3,
          "line_length": 88
        },
        "mypy": {
          "python_version": "3.9",
          "warn_return_any": true,
          "warn_unused_configs": true,
          "disallow_untyped_defs": true,
          "disallow_incomplete_defs": true,
          "check_untyped_defs": true,
          "disallow_untyped_decorators": true,
          "no_implicit_optional": true,
          "warn_redundant_casts": true,
          "warn_unused_ignores": true,
          "warn_no_return": true,
          "warn_unreachable": true,
          "strict_equality": true
        },
        "pytest": {
          "ini_options": {
            "testpaths": ["tests"],
            "python_files": ["test_*.py", "*_test.py"],
            "python_classes": ["Test*"],
            "python_functions": ["test_*"],
            "addopts": "--strict-markers --strict-config --cov=src --cov-report=term-missing --cov-report=html --cov-report=json --cov-fail-under=80"
          }
        },
        "coverage": {
          "run": {
            "source": ["src"],
            "omit": ["*/tests/*", "*/venv/*", "*/__pycache__/*"]
          },
          "report": {
            "exclude_lines": [
              "pragma: no cover",
              "def __repr__",
              "raise AssertionError",
              "raise NotImplementedError"
            ]
          }
        }
      }
    },
    ".flake8": {
      "flake8": {
        "max-line-length": 88,
        "extend-ignore": ["E203", "W503"],
        "exclude": [".git", "__pycache__", "build", "dist", ".venv", "venv"],
        "per-file-ignores": ["__init__.py:F401"]
      }
    },
    ".bandit": {
      "exclude_dirs": ["tests", "venv", ".venv"],
      "skips": ["B101"],
      "tests": ["B201", "B301", "B302", "B303", "B304", "B305", "B306", "B307", "B308", "B309", "B310", "B311", "B312", "B313", "B314", "B315", "B316", "B317", "B318", "B319", "B320", "B321", "B322", "B323", "B324", "B325", "B401", "B402", "B403", "B404", "B405", "B406", "B407", "B408", "B409", "B410", "B411", "B412", "B413", "B501", "B502", "B503", "B504", "B505", "B506", "B507", "B601", "B602", "B603", "B604", "B605", "B606", "B607", "B608", "B609", "B610", "B611", "B701", "B702", "B703"]
    },
    ".pre-commit-config.yaml": {
      "repos": [
        {
          "repo": "https://github.com/pre-commit/pre-commit-hooks",
          "rev": "v4.4.0",
          "hooks": [
            {"id": "trailing-whitespace"},
            {"id": "end-of-file-fixer"},
            {"id": "check-yaml"},
            {"id": "check-added-large-files"},
            {"id": "check-merge-conflict"},
            {"id": "debug-statements"}
          ]
        },
        {
          "repo": "https://github.com/psf/black",
          "rev": "23.3.0",
          "hooks": [{"id": "black"}]
        },
        {
          "repo": "https://github.com/pycqa/isort",
          "rev": "5.12.0",
          "hooks": [{"id": "isort"}]
        },
        {
          "repo": "https://github.com/pycqa/flake8",
          "rev": "6.0.0",
          "hooks": [{"id": "flake8"}]
        },
        {
          "repo": "https://github.com/pre-commit/mirrors-mypy",
          "rev": "v1.3.0",
          "hooks": [{"id": "mypy"}]
        },
        {
          "repo": "https://github.com/PyCQA/bandit",
          "rev": "1.7.5",
          "hooks": [{"id": "bandit", "args": ["-c", ".bandit"]}]
        }
      ]
    },
    "requirements-dev.txt": [
      "bandit>=1.7.5",
      "safety>=2.3.0",
      "pip-audit>=2.5.0",
      "semgrep>=1.20.0",
      "pylint>=2.17.0",
      "flake8>=6.0.0",
      "mypy>=1.3.0",
      "black>=23.3.0",
      "isort>=5.12.0",
      "autopep8>=2.0.0",
      "pytest>=7.3.0",
      "pytest-cov>=4.1.0",
      "coverage>=7.2.0",
      "pre-commit>=3.3.0",
      "pipdeptree>=2.7.0",
      "pip-licenses>=4.2.0"
    ]
  },
  "scripts": {
    "install": "pip install -r requirements.txt && pip install -r requirements-dev.txt",
    "security:audit": "pip-audit && safety check",
    "security:scan": "bandit -r . -f json && semgrep --config=auto --json",
    "security:check": "pip-audit --format=json && safety check --json",
    "security:deps": "pipdeptree --json",
    "security:licenses": "pip-licenses --format=json",
    "security:full": "pip-audit && safety check && bandit -r . && semgrep --config=auto",
    "lint": "pylint src/ && flake8 src/ && mypy src/",
    "lint:fix": "black . && isort . && autopep8 --in-place --recursive .",
    "format": "black . && isort .",
    "format:check": "black --check . && isort --check-only .",
    "test": "pytest",
    "test:coverage": "pytest --cov=src --cov-report=html --cov-report=json",
    "test:watch": "pytest-watch",
    "typecheck": "mypy src/",
    "pre-commit": "pre-commit run --all-files",
    "deps:update": "pip list --outdated --format=json",
    "deps:tree": "pipdeptree",
    "clean": "find . -type d -name __pycache__ -delete && find . -name '*.pyc' -delete"
  },
  "securityPolicies": {
    "pythonVersion": ">=3.9",
    "pipVersion": ">=23.0",
    "vulnerabilityThreshold": "moderate",
    "allowedLicenses": ["MIT", "Apache-2.0", "BSD-3-Clause", "ISC", "PSF"],
    "blockedPackages": ["pickle", "eval", "exec"],
    "requireHttps": true,
    "enforceIntegrity": true,
    "secureDefaults": {
      "ssl_verify": true,
      "cert_reqs": "CERT_REQUIRED",
      "check_hostname": true,
      "tls_version": "TLSv1.2"
    },
    "environmentVariables": {
      "PYTHONHASHSEED": "random",
      "PYTHONDONTWRITEBYTECODE": "1",
      "PYTHONUNBUFFERED": "1"
    }
  },
  "dockerSecurity": {
    "baseImage": "python:3.11-slim",
    "nonRootUser": true,
    "readOnlyRootFilesystem": true,
    "noNewPrivileges": true,
    "capabilities": {
      "drop": ["ALL"]
    },
    "seccompProfile": "runtime/default",
    "apparmorProfile": "docker-default"
  },
  "cicdSecurity": {
    "dependabot": true,
    "codeql": true,
    "secretScanning": true,
    "vulnerabilityAlerts": true,
    "securityAdvisories": true
  }
}